--한글의 바이트 수 확인

SELECT LENGTH ('아무거나') , LENGTHB('아무거나') 
FROM DEPT;

--대소문자 변환

SELECT UPPER('Oracle'), LOWER('Oracle') 
FROM DEPT;

--좌우 공백 제거 및 문자 채우기
SELECT TRIM(' Oracle '), LPAD('Oracle',20,'%') 
FROM DEPT;

--EMP 테이블에서 JOB이 manager인 사원의 모든 정보 조회

--데이터가 1개도 조회되지 않음
SELECT *
FROM EMP
WHERE JOB = 'manager' ;

--소문자로 치환해서 검색
SELECT *
FROM EMP e 
WHERE LOWER(JOB) = 'manager' ;

--공백을 제외하고 소문자로 치환해서 검색
SELECT *
FROM EMP e 
WHERE LOWER(TRIM(job)) = 'manager' ;

SELECT SYSDATE ,SYSTIMESTAMP ,CURRENT_DATE ,CURRENT_TIMESTAMP
FROM EMP e ;

--EMP 테이블에서 HIREDATE가 1982년인 사원의 ENAME을 조회
SELECT ENAME 
FROM EMP e
WHERE TO_CHAR(HIREDATE , 'YYYY') = '1982'; 

--EMP 테이블에서 HIREDATE가 12월인 사원의 ENAME을 조회
SELECT ENAME 
FROM EMP e 
WHERE TO_CHAR(HIREDATE, 'MM') = '12'; 

SELECT TO_CHAR(12300 , 'L999,999') , TO_CHAR(12300 , 'L000,000') 
FROM EMP e ;

--EMP 테이블의 HIREDATE는 날짜 형식

--이렇게 날짜 형태의 데이터를 삽입해야 하는데 dbeaver는 날짜 형태의 문자열이면
--스스로 날짜라고 생각해서 형 변환을 해서 삽입
--live sql 에서는 형식에 맞지 않다고 에러가 발생

INSERT INTO EMP(EMPNO, HIREDATE)
values(9999, to_date('2021-11-18','yyyy-mm-dd'));

INSERT INTO EMP(empno, HIREDATE)
VALUES(9998, to_date('2021-11-18'));

-- comm이 null이면 데이터들은 결과가 null

-- comm이 null 이면 0으로 계산하도록 수정
SELECT ENAME , SAL+NVL(comm, 0) 
FROM EMP e ;

SELECT ENAME , NVL2(COMM, SAL+COMM, SAL) 
FROM EMP e ;

--emp 테이블에서 ename과 deptno를 조회하고
--deptno가 10이면 accounting
--20이면 research
--30이면 sales
--40이면 operations 라고 출력

SELECT ENAME , DEPTNO, DECODE(DEPTNO,10,'ACCOUNTING',20,'RESEARCH',30,'SALES',40,'OPERATIONS') AS 부서명 
FROM EMP
ORDER BY DEPTNO DESC;

SELECT ENAME , DEPTNO , CASE WHEN DEPTNO = 10 THEN 'ACCOUNTING' WHEN DEPTNO = 20 THEN 'RESEARCH' WHEN DEPTNO = 30 THEN 'SALES' WHEN DEPTNO = 40 THEN 'OPERATIONS' END AS 부서명 
FROM EMP e 
ORDER BY DEPTNO;

--EMP 테이블의 데이터 개수를 조회
SELECT COUNT(EMPNO) 
FROM EMP e ;

SELECT COUNT(*) 
FROM EMP e ;

SELECT COUNT(COMM) 
FROM EMP e ;

--EMP 테이블에서 SAL 값이 가장 큰 것을 조회
SELECT MAX(SAL) 
FROM EMP e ;

--EMP 테이블에서 SAL 값이 가장 큰 것과 이름을 조회 -- 에러
SELECT ENAME ,MAX(SAL)
FROM EMP e
GROUP BY ENAME ;


SELECT DEPTNO,COUNT(*)
FROM EMP e 
GROUP BY DEPTNO ;

--EMP 테이블에서 JOB별 평균 SAL을 조회
SELECT JOB , ROUND(AVG(SAL),2)
FROM EMP e 
GROUP BY JOB

--EMP 테이블에서 JOB별로 그룹화해서 SAL의 평균이 1000 이상인 경우만 조회

--에러 - WHERE 절에 그룹함수를 사용 할 수 없음
SELECT JOB , ROUND(AVG(SAL)) 
FROM EMP e 
WHERE AVG(SAL) 
GROUP BY JOB;

SELECT JOB , ROUND(AVG(SAL)) 
FROM EMP e 
GROUP BY JOB
HAVING AVG(SAL) >= 1000; 

SELECT DEPTNO , AVG(SAL) 
FROM EMP e 
GROUP BY DEPTNO 

-- 1.EMP 테이블에서 인원수, 최대 급여(sal), 최소 급여, 급여의 합을 계산하여 출력하는 SELECT 문장
-- 을 작성

SELECT SUM(SAL) , MIN(SAL) , (MAX(SAL)), COUNT(*) AS 합
FROM EMP e
GROUP BY sal;

-- 2.EMP 테이블에서 각 업무별(job)로 최대 급여(sal), 최소 급여, 급여의 합을 출력하는 SELECT 문장
-- 을 작성

SELECT JOB , MAX(SAL), MIN(SAL) , SUM(SAL) 
FROM EMP e 
GROUP BY JOB ;

3. EMP 테이블에서 업무별(job) 인원수를 구하여 출력하는 SELECT 문장을 작성

SELECT JOB , COUNT(*) 
FROM EMP e 
GROUP BY JOB ;

4. EMP 테이블에서 최고 급여(sal)와 최소 급여의 차이는 얼마인가 출력하는 SELECT 문장을 작성

SELECT MAX(SAL)-MIN(SAL) 
FROM EMP e 


5. EMP 테이블에서 아래의 결과를 출력하는 SELECT 문장을 작성

H_YEAR COUNT(*) MIN(SAL) MAX(SAL) AVG(SAL) SUM(SAL)
------ --------- --------- --------- --------- ---------
80 1 800 800 800 800
81 10 950 5000 2282.5 22825
82 2 1300 3000 2150 4300

SELECT TO_CHAR(HIREDATE,'yy') AS h_year , COUNT(*) , MIN(SAL), MAX(SAL), AVG(SAL), SUM(SAL) 
FROM EMP e 
GROUP BY TO_CHAR(HIREDATE, 'yy')
ORDER BY h_year ASC;

-- EQUI JOIN
SELECT *
FROM EMP ,DEPT
WHERE EMP.DEPTNO = DEPT.DEPTNO; 

SELECT ENAME , DNAME
FROM EMP ,DEPT
WHERE EMP.DEPTNO = DEPT.DEPTNO AND ENAME = 'MILLER';

-- 테이블의 이름을 변경해서 사용

SELECT *
FROM EMP E , DEPT D
WHERE E.DEPTNO = D.DEPTNO AND ENAME = 'MILLER';

--EMP 테이블의 JOB이 MANAGER인 사원의 EMP 테이블의 ENAME DEPT 테이블의 DNAME을 조회
--EMP 테이블은 E DEPT 테이블은 D라는 이름을 사용

SELECT ENAME , DNAME ,JOB 
FROM EMP E , DEPT D
WHERE E.DEPTNO = D.DEPTNO  AND LOWER(JOB) = 'manager'; 

--EMP 테이블의 ENAME과 SALGRADE의 GRADE를 조회하기
SELECT ENAME , GRADE, losal
FROM EMP e , SALGRADE s 
WHERE e.SAL = s.LOSAL;

SELECT ENAME , GRADE ,hisal
FROM EMP e , SALGRADE s 
WHERE e.SAL != s.HISAL ;

--non-equi join 등호가 아닌 다른 연산자를 사용

SELECT ENAME , GRADE
FROM EMP e , SALGRADE s 
WHERE e.SAL BETWEEN s.LOSAL AND s.HISAL ;

--self-join

SELECT e2.ENAME 
FROM EMP e ,EMP e2 
WHERE e.ENAME = 'SCOTT' AND e.MGR = e2.EMPNO ;

--NAME 이 MILLER인 사원의 관리자 이름과 급여(SAL)을 조회

SELECT E2.ENAME ,E2.SAL
FROM EMP E1, EMP E2
WHERE E1.ENAME = 'MILLER' AND E1.MGR = E2.EMPNO;

--INNER JOIN

SELECT *
FROM EMP , DEPT
WHERE EMP.DEPTNO = DEPT.DEPTNO ;

--+를 붙이면 반대편 쪽에만 존재하는 데이터도 JOIN에 참여함
--데이터가 존재하지 않기떄문에 NULL로 나머지를 컬럼을 채움
--LEFT OUTER JOIN

SELECT *
FROM EMP , DEPT
WHERE EMP.DEPTNO(+) = DEPT.DEPTNO ;

--RIGHT OUTER JOIN

SELECT *
FROM EMP , DEPT
WHERE EMP.DEPTNO = DEPT.DEPTNO(+) ;

--ANSI(미국 표준 협회) JOIN
--CROSS JOIN - CATESIAN PRODUCT
--FROM 절에 테이블 이름 2개를 기재할때 공백을 주고 CROSS JOIN을 삽입
--2개 테이블의 모든 레코드 조합이 만들어짐

SELECT *
FROM EMP CROSS JOIN DEPT;

--ANSI INNER JOIN - EQUIO JOIN과 동일

SELECT *
FROM EMP INNER JOIN DEPT
ON EMP.DEPTNO = DEPT.DEPTNO ;

--ANSI OUTER JOIN
-- + 기호대신에 테이블 이름사이에 LEFT RIGHT FULL OUTER JOIN 이라고 기재하는 방식
--EMP 테이블과 DEPT 테이블의 모든 데이터가 조인에 참여하도록 하기

SELECT *
FROM EMP FULL OUTER JOIN DEPT
USING(DEPTNO);


-- 2개 테이블의 조인 컬럼의 이름이 같으면 ON을 생각하고 USING(컬럼이름)을 사용해도 됨
-- 위와 다르게 USING에 대입한 컬럼이름은 1번만 나오고 맨 앞에나옴
SELECT *
FROM EMP INNER JOIN DEPT
USING(DEPTNO);

--NATURAL JOIN
--2개의 테이블의 조인 컬럼이 같으면 FROM절에 테이블 이름 사이에 NATURAL JOIN 이라고 하면
--JOIN조건을 기술하지 않아도됨

SELECT *
FROM EMP NATURAL JOIN DEPT;

-- UNION(합집합)
-- 중복되는데이터는 제외
SELECT DEPTNO
FROM EMP
UNION
SELECT DEPTNO 
FROM DEPT

-- UNION ALL
-- 중복되는데이터도 출력
SELECT DEPTNO
FROM EMP
UNION ALL
SELECT DEPTNO 
FROM DEPT

--INTERSECT (교집합)

SELECT DEPTNO
FROM EMP
INTERSECT
SELECT DEPTNO 
FROM DEPT

--MINUS 한쪽에만 존제하는 데이터

SELECT DEPTNO
FROM DEPT
MINUS
SELECT DEPTNO 
FROM EMP

--1. EMP 테이블에서 모든 사원에 대한 이름(ename), 부서번호(deptno) DEPT 테이블에서 부서명
--(dname)을 가져와서 출력하는 SELECT 문장을 작성 – 2개의 테이블에는 DEPTNO 가 같이 존재
SELECT EMP.ENAME , EMP.DEPTNO , DEPT.DNAME
FROM EMP , DEPT
WHERE EMP.DEPTNO = DEPT.DEPTNO;

--2. DEPT 테이블의 LOC가 NEW YORK에서 근무하고 있는 사원에 대하여 EMP 테이블의 이름
--(ename), 업무(job), 급여(sal), DEPT 테이블의 부서명(dname)을 출력하는 SELECT 문장을 작
--성

SELECT ENAME , JOB , SAL ,DEPT.DNAME ,DEPT.LOC 
FROM EMP, DEPT
WHERE EMP.DEPTNO = DEPT.DEPTNO AND LOC = 'NEW YORK';


--3. EMP 테이블에서 보너스(comm)가 null 이 아닌 사원에 대하여 이름(ename), DEPT 테이블의 부
--서명(dname), 위치(loc)를 출력하는 SELECT 문장을 작성

SELECT ENAME , DEPT.DNAME , DEPT.LOC 
FROM EMP, DEPT
WHERE EMP.DEPTNO = DEPT.DEPTNO AND COMM IS NOT NULL

--4. EMP 테이블에서 이름(ename) 중 L자가 있는 사원에 대하여 이름(ename), 업무(job), DEPT 테
--이블의 부서명(dname), 위치(loc)를 출력하는 SELECT 문장을 작성

SELECT ENAME , JOB , DEPT.DNAME ,DEPT.LOC 
FROM EMP , DEPT
WHERE EMP.DEPTNO = DEPT.DEPTNO AND DNAME LIKE '%L%';


--5. EMP 테이블에서 그들의 관리자(mgr) 보다 먼저 입사한 사원에 대하여 이름(ename), 입사일
--(hiredate), 관리자(mgr) 이름, 관리자(mgr) 입사일을 출력하는 SELECT 문장을 작성

SELECT E1.ENAME , E1.HIREDATE, E2.ENAME , E2.HIREDATE 
FROM EMP E1 , EMP E2
WHERE E2.EMPNO = E1.MGR AND E1.HIREDATE < E2.HIREDATE ;
