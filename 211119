--tcity 테이블에서 popu가 최대인 데이터의 name을 조회하고자 하는경우
--집계(그룹) 함수는 그룹화 하지 않은 항목과 같이 조회 할 수 없습니다.
SELECT NAME, MAX(POPU) 
FROM TCITY;

-- 앞에서 구한 결과를 가지고 도시 이름 찾기

SELECT NAME 
FROM TCITY
WHERE POPU = 974;

--서브 쿼리 이용
SELECT NAME , POPU 
FROM TCITY
WHERE POPU = (SELECT MAX(POPU) FROM TCITY);

--emp 테이블에서 평균 sal 보다 더 큰 sal을 갖는 사원의 ename 과 sal을 조회

SELECT ENAME , SAL 
FROM EMP
WHERE SAL > (SELECT AVG(SAL) FROM EMP);

--emp 테이블에서 dept 테이블의 dname이 sales(영업부)인 부서에서 근무하는 사원의 이름(ename)
--과 급여(sal)을 출력

SELECT ENAME ,SAL 
FROM EMP
WHERE DEPTNO = (SELECT DEPTNO FROM DEPT WHERE DNAME = 'SALES');

--EMP 테이블에서 직속상관(MGR)의 이름이 KING인 사원의 이름과(ENAME)과 급여
--(SAL)을 출력
SELECT ENAME ,SAL 
FROM EMP
WHERE MGR = (SELECT EMPNO FROM EMP WHERE ENAME = 'KING');

--EMP 테이블에서 DEPT 테이블의 LOC가 DALLAS인 사원의 이름(ENAME),
--부서 번호(DEPTNO)

SELECT ENAME , DEPTNO 
FROM EMP
WHERE DEPTNO = (SELECT DEPTNO FROM DEPT WHERE LOC = 'DALLAS');

--TSTAFF 테이블에서 NAME이 안중근인 데이터와 같은 부서(DEPART)
--에 근무하고 성별(GENDER)이 같은 부서에 근무하는 사원의 모든 정보를 조회

SELECT *
FROM TSTAFF
WHERE DEPART = (SELECT DEPART FROM TSTAFF WHERE NAME = '안중근')
AND GENDER = (SELECT GENDER FROM TSTAFF WHERE NAME = '안중근');

--다중 열 서브쿼리

SELECT *
FROM TSTAFF
WHERE (DEPART, GENDER) = (SELECT DEPART,GENDER FROM TSTAFF WHERE NAME = '안중근');

--EMP 테이블에서 DEPTNO 별로 그룹화해서 평균 SAL을 구한 후 이 중에 값들과 일치하는 SAL의 값을
--갖는 직원의 EMPNO와 ENAME, SAL, DEPTNO를 조회

-- 아래는 에러
SELECT EMPNO ,ENAME ,SAL ,DEPTNO 
FROM EMP
WHERE SAL = (SELECT AVG(SAL) FROM EMP GROUP BY DEPTNO);

-- 위처럼 작성하면 에러가 나기때문에 IN을 사용
SELECT EMPNO ,ENAME ,SAL ,DEPTNO 
FROM EMP
WHERE SAL IN (SELECT AVG(SAL) FROM EMP GROUP BY DEPTNO);

--EMP 테이블에서 JOB이 MANAGER인 사원이 속한
-- 부서의 DEPT 테이블의 부서 번호(DEPTNO)와 부서 이름(DNAME) 그리고 지역(LOC)을 조회

SELECT DEPTNO, DNAME, LOC
FROM DEPT
WHERE DEPTNO IN (SELECT DEPTNO FROM EMP WHERE JOB = 'MANAGER')

--EMP테이블에서 DEPTNO가 30인 데이터 전부 보다 SAL 이 값이 큰 데이터의 ENAME과 SAL을 조회

SELECT ENAME ,SAL 
FROM EMP
WHERE SAL > (SELECT SAL FROM EMP WHERE DEPTNO=30);

--다중 행 연산자 이용해서 해결
SELECT ENAME , SAL 
FROM EMP
WHERE SAL > ALL(SELECT SAL FROM EMP WHERE DEPTNO=30);

--집계 함수를 이용해서 해결

SELECT ENAME , SAL 
FROM EMP
WHERE SAL > (SELECT MAX(SAL) FROM EMP WHERE DEPTNO=30);

--emp 테이블에서 sal 이 2000이 넘는 사원

--1. EMP 테이블에서 ENAME이 BLAKE 인 데이터와 같은 부서(DEPTNO)에 있는 모든 사원의 이름
--(ENAME)과 입사일자(hiredate)를 출력하는 SELECT문을 작성

SELECT ENAME ,HIREDATE 
FROM EMP
WHERE DEPTNO = (SELECT DEPTNO FROM EMP WHERE ENAME = 'BLAKE');


--2. EMP 테이블에서 평균 급여(SAL) 이상을 받는 모든 종업원에 대해서 종업원 번호(EMPNO)와 이름
--(ENAME)을 출력하는 SELECT문을 작성하시오. 단 급여가 많은 순으로 출력

SELECT EMPNO ,ENAME
FROM EMP
WHERE SAL > (SELECT AVG(SAL) FROM EMP)
ORDER BY SAL DESC ;


--3. EMP 테이블에서 이름(ENAME)에 “T”가 있는 사원이 근무하는 부서에서 근무하는 모든 종업원에
--대해 사원 번호(EMPNO),이름(ENAME),급여(SAL)를 출력하는 SELECT문을 작성하시오. 단 사원번호
--(EMPNO) 순으로 출력

SELECT /*+ INDEX_ASC(EMP)*/ EMPNO ,ENAME ,SAL 
FROM EMP
WHERE DEPTNO IN (SELECT DEPTNO FROM EMP WHERE ENAME LIKE '%T%')

SELECT EMPNO ,ENAME ,SAL 
FROM EMP
WHERE DEPTNO IN (SELECT DEPTNO FROM EMP WHERE ENAME LIKE '%T%')
ORDER BY EMPNO ASC ;


--4. EMP 테이블에서 DEPT 테이블의 LOC 가 DALLAS인 종업원에 대해 이름(ENAME),업무(job),급여
--(SAL)를 출력하는 SELECT문을 작성

SELECT ENAME ,JOB ,SAL
FROM EMP
WHERE DEPTNO = (SELECT DEPTNO FROM DEPT WHERE loc LIKE 'DALLAS');

--5. EMP 테이블에서 MGR의 이름(ENAME)이 KING 인 사원의 이름(ENAME)과 급여(SAL)를 출력하는
--SELECT문을 작성

SELECT ENAME ,SAL 
FROM EMP
WHERE MGR = (SELECT EMPNO FROM EMP WHERE ENAME LIKE 'KING');

--6. EMP 테이블에서 월급(SAL)이 DEPTNO가 30인 데이터의 최저 월급보다 높은 사원의 모든 정보를
--출력하는 SELECT문을 작성

SELECT *
FROM EMP
WHERE SAL > (SELECT MIN(SAL) FROM EMP WHERE DEPTNO =30);


--테이블 관련 작업

CREATE TABLE EMP01(
	EMPNO NUMBER(4),
	ENAME VARCHAR2(20),
	SAL NUMBER(7,2));

--emp 테이블의 모든 데이터를 그대로 복제한 emp02 테이블 생성
CREATE TABLE EMP02
AS
SELECT *
FROM EMP;

-- 14개의 행과 8개의 열을 가진 테이블 생성
SELECT *
FROM EMP02;

--컬럼 값을 자동으로 증가시키기

CREATE TABLE TEST_01(
	ID_COL1 NUMBER GENERATED AS IDENTITY PRIMARY KEY,
	COL2 VARCHAR2(3),
	COL3 VARCHAR2(3)
);

INSERT INTO TEST_01(COL2,COL3) VALUES('001', '00A');
INSERT INTO TEST_01(COL2,COL3) VALUES('002', '00B');
INSERT INTO TEST_01(COL2,COL3) VALUES('003', '00C');

SELECT /*+ INDEX_DESC(TEST_01) */*
FROM TEST_01;

--테이블 추가
ALTER TABLE EMP01
ADD(JOB VARCHAR2(30));

SELECT *
FROM EMP01;

--컬럼의 자료형을 변경
--EMP01 테이블의 JOB컬럼의 자료형을 VARCHAR2(20)으로 변경
ALTER TABLE EMP01
MODIFY (JOB VARCHAR2(20));

--EMP01 테이블의 JOB 컬럼을 삭제
ALTER TABLE EMP01
DROP COLUMN JOB;

--EMP01 테이블의 SAL 컬럼을 사용 못하도록 설정
ALTER TABLE EMP01
SET UNUSED(SAL);

--사용 못하도록 한 컬럼 삭제
ALTER TABLE EMP01
DROP UNUSED COLUMNS;

--EMP01 테이블 삭제
DROP TABLE EMP01;

--테이블의 데이터 삭제
INSERT INTO EMP02(ENAME,JOB) VALUES('김백산','학생');

TRUNCATE TABLE EMP02;

SELECT *
FROM EMP02;

--emp02 테이블의 이름을 test로 변경
RENAME EMP02 TO TEST;

SELECT *
FROM EMP02;

SELECT *
FROM TEST;

--DEPT 테이블에 DEPTNO가 10이고 DNAME이 TEST이고 LOC가 SEOUL인 데이터를 삽입
INSERT INTO DEPT(DEPTNO, DNAME,LOC) VALUES(10,'TEST','SEOUL');

--회원 테이블 생성(TEMPMEMBER)
--ID - 변하지 않는 문자열이고 영문 20자까지, 기본키(PRIMARY KEY)
--이름 - 변하는 문자열이고 한글 5자까지, 필수(NOT NULL)
--별명 - 변하는 문자열이고 한글 5자까지, 유일(UNIQUE)
--소속사 - 변하는 문자열이고 한글 10자까지
CREATE TABLE TEMPMEMBER(
	ID VARCHAR2(60) PRIMARY KEY,
	NAME CHAR(15) NOT NULL,
	NICKNAME CHAR(15) UNIQUE,
	COMPNAME CHAR(30)
);
--데이터 삽입
INSERT INTO TEMPMEMBER(
	ID,NAME,NICKNAME ,COMPNAME )
VALUES('man10_49','김백산','김백산13','소울');

-- NOT NULL은 NULL 불가능
INSERT INTO TEMPMEMBER(
	ID,NAME,NICKNAME ,COMPNAME )
VALUES('man10_41',NULL,'태백산','소울');

--UNIQUE는 NULL 가능
INSERT INTO TEMPMEMBER(
	ID,NAME,NICKNAME ,COMPNAME )
VALUES('man10_47','태백산',NULL,'소울');

--PRIMARY KEY는 NOT NULL 이고 UNIQUE

INSERT INTO TEMPMEMBER(
	ID,NAME,NICKNAME ,COMPNAME )
VALUES(NULL,'김춘삼','김춘삼','소울');

INSERT INTO TEMPMEMBER(
	ID,NAME,NICKNAME ,COMPNAME )
VALUES('kim_chun','김춘삼','김춘삼','소울');

INSERT INTO TEMPMEMBER(
	ID,NAME,NICKNAME ,COMPNAME )
VALUES('kim_chun','김춘삼','김춘삼','소울');

SELECT *
FROM TEMPMEMBER;

-- 제약조건 이름 부여
CREATE TABLE EMP04(
	EMPNO NUMBER(4) CONSTRAINT EMP04_EMPNO_UK UNIQUE,
	ENAME VARCHAR(10) CONSTRAINT EMP04_ENAME_NN NOT NULL);
);

--제약조건 확인
SELECT TABLE_NAME, CONSTRAINT_NAME
FROM USER_CONSTRAINTS
WHERE TABLE_NAME IN ('EMP04');

--속성의 값을 제한하는 제약조건

--DEPT 테이블과 동일한 모양의 DEPTCOPY 테이블을 생성
CREATE TABLE DEPTCOPY(
	DEPTNO NUMBER(10) PRIMARY KEY,
	DNAME VARCHAR2(30) NOT NULL,
	LOC VARCHAR2(30) DEFAULT '서울' 
);

INSERT INTO DEPTCOPY(DEPTNO,DNAME,LOC)
VALUES (10,'영업','만재도');

INSERT INTO DEPTCOPY(DEPTNO,DNAME)
VALUES (20,'본사');

SELECT *
FROM DEPTCOPY;

--DEPTCOPY 테이블의 DEPTNO를 참조하는 EMP11 테이블을 생성
CREATE TABLE EMP11(
	EMPNO NUMBER(10) PRIMARY KEY,
	ENAME VARCHAR2(30),
	GENDER VARCHAR2(3) CONSTRAINT EMP11_CHECK CHECK(GENDER IN ('남','여')),
	DEPTNO NUMBER(10) REFERENCES DEPTCOPY(DEPTNO)
);

SELECT *
FROM EMP11;

--CHECK 제약조건 확인

--체크제약조건 위반
INSERT INTO EMP11(EMPNO, ENAME, GENDER, DEPTNO) VALUES(1,'MAN','MAN',10);

--무결성 제약 조건위반
--외래키 값은 반드시 존재하는 값이거나 NULL 이어야 합니다.
INSERT INTO EMP11(EMPNO, ENAME, GENDER, DEPTNO) VALUES(1,'MAN','남',11);

--외래키 값으로 null은 허용
INSERT INTO EMP11(EMPNO, ENAME, GENDER, DEPTNO) VALUES(1,'MAN','남',NULL);

--상위 테이블에 존재하는 값을 설정 가능
INSERT INTO EMP11(EMPNO, ENAME, GENDER, DEPTNO) VALUES(2,'WOMAN','여',10);

--외래키로 참조되고 있는 테이블은 삭제가 안됩니다.
DROP TABLE DEPTCOPY;

--EMP11 테이블 삭제
DROP TABLE EMP11;

--DEPTCOPY 테이블의 DEPTNO를 참조하는 EMP11 테이블을 생성 - ON DELETE CASCADE옵션
CREATE TABLE EMP11(
	EMPNO NUMBER(10) PRIMARY KEY,
	ENAME VARCHAR2(30),
	GENDER VARCHAR2(3) CHECK(GENDER IN ('남','여')),
	DEPTNO REFERENCES DEPTCOPY(DEPTNO) ON DELETE CASCADE
	);

--상위 테이블에 존재하는 값을 설정 가능
INSERT INTO EMP11(EMPNO,ENAME,GENDER,DEPTNO) VALUES(2,'WOMAN','여',10);

SELECT *
FROM EMP11;

--옵션에 ON DELETE CASCADE를 설정해서 외래키를 설정했기 때문에 참조하고 있는 데이터는 삭제가
--가능하고 이 때 참조하고 있는 데이터도 같이 삭제
DELETE FROM DEPTCOPY 
WHERE DEPTNO = 10;

SELECT *
FROM EMP11;

--테이블 레벨 제약조건


